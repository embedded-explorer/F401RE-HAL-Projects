
Timer_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001458  08001458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001458  08001458  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001458  08001458  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001458  08001458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001458  08001458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800145c  0800145c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  0800146c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800146c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000115c  00000000  00000000  00027c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  00028dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  000295e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001579a  00000000  00000000  00029d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c9e  00000000  00000000  0003f512  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089991  00000000  00000000  000451b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ceb41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000cebbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001440 	.word	0x08001440

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001440 	.word	0x08001440

080001d4 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef hTimer2;

void SysTick_Handler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001d8:	f000 f980 	bl	80004dc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001dc:	f000 fad1 	bl	8000782 <HAL_SYSTICK_IRQHandler>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&hTimer2);
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <TIM2_IRQHandler+0x10>)
 80001ea:	f000 fcb7 	bl	8000b5c <HAL_TIM_IRQHandler>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000002c 	.word	0x2000002c

080001f8 <main>:

TIM_HandleTypeDef hTimer2;
uint16_t pulse;

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_Init();
 80001fc:	f000 f91c 	bl	8000438 <HAL_Init>
	Timer2_Init();
 8000200:	f000 f83c 	bl	800027c <Timer2_Init>
	if(HAL_TIM_PWM_Start(&hTimer2, TIM_CHANNEL_1) != HAL_OK)
 8000204:	2100      	movs	r1, #0
 8000206:	4819      	ldr	r0, [pc, #100]	; (800026c <main+0x74>)
 8000208:	f000 fc76 	bl	8000af8 <HAL_TIM_PWM_Start>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d010      	beq.n	8000234 <main+0x3c>
	{
		Error_handler();
 8000212:	f000 f82f 	bl	8000274 <Error_handler>
	}
	while(1)
	{
		while(pulse < hTimer2.Init.Period)
 8000216:	e00d      	b.n	8000234 <main+0x3c>
		{
			__HAL_TIM_SET_COMPARE(&hTimer2, TIM_CHANNEL_1, pulse);
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0x78>)
 800021a:	881a      	ldrh	r2, [r3, #0]
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <main+0x74>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
			pulse += 10;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <main+0x78>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	330a      	adds	r3, #10
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <main+0x78>)
 800022c:	801a      	strh	r2, [r3, #0]
			HAL_Delay(10);
 800022e:	200a      	movs	r0, #10
 8000230:	f000 f974 	bl	800051c <HAL_Delay>
		while(pulse < hTimer2.Init.Period)
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0x78>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <main+0x74>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	429a      	cmp	r2, r3
 8000240:	d3ea      	bcc.n	8000218 <main+0x20>
		}
		while(pulse > 0)
 8000242:	e00d      	b.n	8000260 <main+0x68>
		{
			__HAL_TIM_SET_COMPARE(&hTimer2, TIM_CHANNEL_1, pulse);
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x78>)
 8000246:	881a      	ldrh	r2, [r3, #0]
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x74>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
			pulse -= 10;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <main+0x78>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	3b0a      	subs	r3, #10
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <main+0x78>)
 8000258:	801a      	strh	r2, [r3, #0]
			HAL_Delay(10);
 800025a:	200a      	movs	r0, #10
 800025c:	f000 f95e 	bl	800051c <HAL_Delay>
		while(pulse > 0)
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <main+0x78>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1ed      	bne.n	8000244 <main+0x4c>
		while(pulse < hTimer2.Init.Period)
 8000268:	e7e4      	b.n	8000234 <main+0x3c>
 800026a:	bf00      	nop
 800026c:	2000002c 	.word	0x2000002c
 8000270:	20000028 	.word	0x20000028

08000274 <Error_handler>:

	return 0;
}

void Error_handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	while(1);
 8000278:	e7fe      	b.n	8000278 <Error_handler+0x4>
	...

0800027c <Timer2_Init>:
}

void Timer2_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef timer2OC_Config;

	// Initialize Time Base Unit
	hTimer2.Instance = TIM2;
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <Timer2_Init+0x78>)
 8000284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000288:	601a      	str	r2, [r3, #0]
	hTimer2.Init.Prescaler = (25 - 1);
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <Timer2_Init+0x78>)
 800028c:	2218      	movs	r2, #24
 800028e:	605a      	str	r2, [r3, #4]
	hTimer2.Init.Period = (640 - 1);
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <Timer2_Init+0x78>)
 8000292:	f240 227f 	movw	r2, #639	; 0x27f
 8000296:	60da      	str	r2, [r3, #12]
	hTimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <Timer2_Init+0x78>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_PWM_Init(&hTimer2) != HAL_OK)
 800029e:	4815      	ldr	r0, [pc, #84]	; (80002f4 <Timer2_Init+0x78>)
 80002a0:	f000 fbfe 	bl	8000aa0 <HAL_TIM_PWM_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <Timer2_Init+0x32>
	{
		Error_handler();
 80002aa:	f7ff ffe3 	bl	8000274 <Error_handler>
	}

	// Configure Input Channel of Timer
	memset(&timer2OC_Config, 0, sizeof(TIM_OC_InitTypeDef));
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	221c      	movs	r2, #28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f8bb 	bl	8001430 <memset>
	timer2OC_Config.OCMode = TIM_OCMODE_PWM1;
 80002ba:	2360      	movs	r3, #96	; 0x60
 80002bc:	607b      	str	r3, [r7, #4]
	timer2OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
	timer2OC_Config.Pulse = (hTimer2.Init.Period * 50) / 100;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <Timer2_Init+0x78>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	2232      	movs	r2, #50	; 0x32
 80002c8:	fb02 f303 	mul.w	r3, r2, r3
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <Timer2_Init+0x7c>)
 80002ce:	fba2 2303 	umull	r2, r3, r2, r3
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&hTimer2, &timer2OC_Config, TIM_CHANNEL_1) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <Timer2_Init+0x78>)
 80002de:	f000 fd45 	bl	8000d6c <HAL_TIM_PWM_ConfigChannel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <Timer2_Init+0x70>
	{
		Error_handler();
 80002e8:	f7ff ffc4 	bl	8000274 <Error_handler>
	}
}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000002c 	.word	0x2000002c
 80002f8:	51eb851f 	.word	0x51eb851f

080002fc <HAL_MspInit>:

// This function is called by HAL_Init
// Used to do low level processor specific Initializations
// Refer stm32f4xx_hal_cortex.c
void HAL_MspInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000300:	2003      	movs	r0, #3
 8000302:	f000 f9fd 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (7 << 16);	// Enable Usage Fault, Bus Fault and Memory Fault
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <HAL_MspInit+0x40>)
 8000308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030a:	4a0c      	ldr	r2, [pc, #48]	; (800033c <HAL_MspInit+0x40>)
 800030c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000310:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure priority for system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);	// Priority for Memory management fault
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	f06f 000b 	mvn.w	r0, #11
 800031a:	f000 f9fc 	bl	8000716 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);			// Priority for Bus fault
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	f06f 000a 	mvn.w	r0, #10
 8000326:	f000 f9f6 	bl	8000716 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);		// Priority for Usage fault
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	f06f 0009 	mvn.w	r0, #9
 8000332:	f000 f9f0 	bl	8000716 <HAL_NVIC_SetPriority>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <HAL_TIM_PWM_MspInit>:

// Low Level Initialization of Timer2
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	; 0x28
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2_gpio;

	// 1. Enable Clock for TIM4
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 800034e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000350:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6413      	str	r3, [r2, #64]	; 0x40
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	613b      	str	r3, [r7, #16]
 8000362:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_TIM_PWM_MspInit+0x70>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]

	// Configure Alternate Function
	tim2_gpio.Pin = GPIO_PIN_5;
 8000380:	2320      	movs	r3, #32
 8000382:	617b      	str	r3, [r7, #20]
	tim2_gpio.Mode = GPIO_MODE_AF_PP;
 8000384:	2302      	movs	r3, #2
 8000386:	61bb      	str	r3, [r7, #24]
	tim2_gpio.Alternate = GPIO_AF1_TIM2;
 8000388:	2301      	movs	r3, #1
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2_gpio);
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	4619      	mov	r1, r3
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <HAL_TIM_PWM_MspInit+0x74>)
 8000394:	f000 fa02 	bl	800079c <HAL_GPIO_Init>

	// 2. Enable IRQ for TIM10
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000398:	201c      	movs	r0, #28
 800039a:	f000 f9d8 	bl	800074e <HAL_NVIC_EnableIRQ>

	// 3. Setup the Priority
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	210f      	movs	r1, #15
 80003a2:	201c      	movs	r0, #28
 80003a4:	f000 f9b7 	bl	8000716 <HAL_NVIC_SetPriority>
}
 80003a8:	bf00      	nop
 80003aa:	3728      	adds	r7, #40	; 0x28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40020000 	.word	0x40020000

080003b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <SystemInit+0x28>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <SystemInit+0x28>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SystemInit+0x28>)
 80003ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d2:	609a      	str	r2, [r3, #8]
#endif
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800041c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003ea:	e003      	b.n	80003f4 <LoopCopyDataInit>

080003ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003f2:	3104      	adds	r1, #4

080003f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003fc:	d3f6      	bcc.n	80003ec <CopyDataInit>
  ldr  r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000400:	e002      	b.n	8000408 <LoopFillZerobss>

08000402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000404:	f842 3b04 	str.w	r3, [r2], #4

08000408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800040a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800040c:	d3f9      	bcc.n	8000402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800040e:	f7ff ffd3 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000412:	f000 ffe9 	bl	80013e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000416:	f7ff feef 	bl	80001f8 <main>
  bx  lr    
 800041a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800041c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000420:	08001460 	.word	0x08001460
  ldr  r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000428:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800042c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000430:	20000070 	.word	0x20000070

08000434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <HAL_Init+0x40>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <HAL_Init+0x40>)
 8000442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <HAL_Init+0x40>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <HAL_Init+0x40>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_Init+0x40>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <HAL_Init+0x40>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000460:	2003      	movs	r0, #3
 8000462:	f000 f94d 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000466:	2000      	movs	r0, #0
 8000468:	f000 f808 	bl	800047c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800046c:	f7ff ff46 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40023c00 	.word	0x40023c00

0800047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_InitTick+0x54>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_InitTick+0x58>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000492:	fbb3 f3f1 	udiv	r3, r3, r1
 8000496:	fbb2 f3f3 	udiv	r3, r2, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f965 	bl	800076a <HAL_SYSTICK_Config>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
 80004a8:	e00e      	b.n	80004c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d80a      	bhi.n	80004c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295
 80004b8:	f000 f92d 	bl	8000716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <HAL_InitTick+0x5c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	e000      	b.n	80004c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000004 	.word	0x20000004

080004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_IncTick+0x20>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_IncTick+0x24>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_IncTick+0x24>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000008 	.word	0x20000008
 8000500:	2000006c 	.word	0x2000006c

08000504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return uwTick;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HAL_GetTick+0x14>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000006c 	.word	0x2000006c

0800051c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000524:	f7ff ffee 	bl	8000504 <HAL_GetTick>
 8000528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000534:	d005      	beq.n	8000542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_Delay+0x40>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000542:	bf00      	nop
 8000544:	f7ff ffde 	bl	8000504 <HAL_GetTick>
 8000548:	4602      	mov	r2, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	429a      	cmp	r2, r3
 8000552:	d8f7      	bhi.n	8000544 <HAL_Delay+0x28>
  {
  }
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000008 	.word	0x20000008

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db0b      	blt.n	80005ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 021f 	and.w	r2, r3, #31
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <__NVIC_EnableIRQ+0x38>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	; (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	; 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff ff8e 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff29 	bl	8000560 <__NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff3e 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff8e 	bl	8000654 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <__NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff31 	bl	80005c4 <__NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffa2 	bl	80006bc <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000786:	f000 f802 	bl	800078e <HAL_SYSTICK_Callback>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	e159      	b.n	8000a6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b8:	2201      	movs	r2, #1
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f040 8148 	bne.w	8000a66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d00b      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d007      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ea:	2b11      	cmp	r3, #17
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b12      	cmp	r3, #18
 80007f4:	d130      	bne.n	8000858 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2203      	movs	r2, #3
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4013      	ands	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	4313      	orrs	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4013      	ands	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	f003 0201 	and.w	r2, r3, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4313      	orrs	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d003      	beq.n	8000898 <HAL_GPIO_Init+0xfc>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d123      	bne.n	80008e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	220f      	movs	r2, #15
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	69b9      	ldr	r1, [r7, #24]
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0203 	and.w	r2, r3, #3
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4313      	orrs	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	2b00      	cmp	r3, #0
 800091e:	f000 80a2 	beq.w	8000a66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a55      	ldr	r2, [pc, #340]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800093e:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <HAL_GPIO_Init+0x2e8>)
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3302      	adds	r3, #2
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <HAL_GPIO_Init+0x2ec>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x202>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x1fe>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a46      	ldr	r2, [pc, #280]	; (8000a90 <HAL_GPIO_Init+0x2f4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x1fa>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <HAL_GPIO_Init+0x2f8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x1f6>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <HAL_GPIO_Init+0x2fc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x1f2>
 800098a:	2304      	movs	r3, #4
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800098e:	2307      	movs	r3, #7
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x204>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x2e8>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_GPIO_Init+0x300>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_GPIO_Init+0x300>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f aea2 	bls.w	80007b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40013c00 	.word	0x40013c00

08000aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e01d      	b.n	8000aee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d106      	bne.n	8000acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fc3a 	bl	8000340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2202      	movs	r2, #2
 8000ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3304      	adds	r3, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4610      	mov	r0, r2
 8000ae0:	f000 fa3c 	bl	8000f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2201      	movs	r2, #1
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fc32 	bl	8001374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_TIM_PWM_Start+0x60>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d107      	bne.n	8000b2a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b06      	cmp	r3, #6
 8000b3a:	d007      	beq.n	8000b4c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f042 0201 	orr.w	r2, r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000

08000b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d122      	bne.n	8000bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d11b      	bne.n	8000bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f06f 0202 	mvn.w	r2, #2
 8000b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f9be 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8000ba4:	e005      	b.n	8000bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9b0 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f9c1 	bl	8000f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d122      	bne.n	8000c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d11b      	bne.n	8000c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f06f 0204 	mvn.w	r2, #4
 8000bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2202      	movs	r2, #2
 8000be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f994 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8000bf8:	e005      	b.n	8000c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f986 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f997 	bl	8000f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d122      	bne.n	8000c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d11b      	bne.n	8000c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f06f 0208 	mvn.w	r2, #8
 8000c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2204      	movs	r2, #4
 8000c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f96a 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8000c4c:	e005      	b.n	8000c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f95c 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f96d 	bl	8000f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d122      	bne.n	8000cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	2b10      	cmp	r3, #16
 8000c7a:	d11b      	bne.n	8000cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f06f 0210 	mvn.w	r2, #16
 8000c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2208      	movs	r2, #8
 8000c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f940 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8000ca0:	e005      	b.n	8000cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f932 	bl	8000f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f943 	bl	8000f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10e      	bne.n	8000ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d107      	bne.n	8000ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f06f 0201 	mvn.w	r2, #1
 8000cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f90c 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	2b80      	cmp	r3, #128	; 0x80
 8000cec:	d10e      	bne.n	8000d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf8:	2b80      	cmp	r3, #128	; 0x80
 8000cfa:	d107      	bne.n	8000d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fb63 	bl	80013d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	2b40      	cmp	r3, #64	; 0x40
 8000d18:	d10e      	bne.n	8000d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d24:	2b40      	cmp	r3, #64	; 0x40
 8000d26:	d107      	bne.n	8000d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f908 	bl	8000f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	2b20      	cmp	r3, #32
 8000d44:	d10e      	bne.n	8000d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	2b20      	cmp	r3, #32
 8000d52:	d107      	bne.n	8000d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f06f 0220 	mvn.w	r2, #32
 8000d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fb2d 	bl	80013be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e0b4      	b.n	8000ef0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2202      	movs	r2, #2
 8000d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0c      	cmp	r3, #12
 8000d9a:	f200 809f 	bhi.w	8000edc <HAL_TIM_PWM_ConfigChannel+0x170>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000dd9 	.word	0x08000dd9
 8000da8:	08000edd 	.word	0x08000edd
 8000dac:	08000edd 	.word	0x08000edd
 8000db0:	08000edd 	.word	0x08000edd
 8000db4:	08000e19 	.word	0x08000e19
 8000db8:	08000edd 	.word	0x08000edd
 8000dbc:	08000edd 	.word	0x08000edd
 8000dc0:	08000edd 	.word	0x08000edd
 8000dc4:	08000e5b 	.word	0x08000e5b
 8000dc8:	08000edd 	.word	0x08000edd
 8000dcc:	08000edd 	.word	0x08000edd
 8000dd0:	08000edd 	.word	0x08000edd
 8000dd4:	08000e9b 	.word	0x08000e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93c 	bl	800105c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0208 	orr.w	r2, r2, #8
 8000df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6999      	ldr	r1, [r3, #24]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	619a      	str	r2, [r3, #24]
      break;
 8000e16:	e062      	b.n	8000ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f982 	bl	8001128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6999      	ldr	r1, [r3, #24]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	021a      	lsls	r2, r3, #8
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	619a      	str	r2, [r3, #24]
      break;
 8000e58:	e041      	b.n	8000ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f9cd 	bl	8001200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0208 	orr.w	r2, r2, #8
 8000e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0204 	bic.w	r2, r2, #4
 8000e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	69d9      	ldr	r1, [r3, #28]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	61da      	str	r2, [r3, #28]
      break;
 8000e98:	e021      	b.n	8000ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fa17 	bl	80012d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	69d9      	ldr	r1, [r3, #28]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	021a      	lsls	r2, r3, #8
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	61da      	str	r2, [r3, #28]
      break;
 8000eda:	e000      	b.n	8000ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8000edc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a34      	ldr	r2, [pc, #208]	; (8001040 <TIM_Base_SetConfig+0xe4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00f      	beq.n	8000f94 <TIM_Base_SetConfig+0x38>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7a:	d00b      	beq.n	8000f94 <TIM_Base_SetConfig+0x38>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <TIM_Base_SetConfig+0xe8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <TIM_Base_SetConfig+0x38>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a30      	ldr	r2, [pc, #192]	; (8001048 <TIM_Base_SetConfig+0xec>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d003      	beq.n	8000f94 <TIM_Base_SetConfig+0x38>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <TIM_Base_SetConfig+0xf0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d108      	bne.n	8000fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a25      	ldr	r2, [pc, #148]	; (8001040 <TIM_Base_SetConfig+0xe4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01b      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d017      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <TIM_Base_SetConfig+0xe8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <TIM_Base_SetConfig+0xec>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00f      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <TIM_Base_SetConfig+0xf0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00b      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <TIM_Base_SetConfig+0xf4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <TIM_Base_SetConfig+0xf8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <TIM_Base_SetConfig+0x8a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <TIM_Base_SetConfig+0xfc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d108      	bne.n	8000ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4313      	orrs	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <TIM_Base_SetConfig+0xe4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d103      	bne.n	800102c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	615a      	str	r2, [r3, #20]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	40000400 	.word	0x40000400
 8001048:	40000800 	.word	0x40000800
 800104c:	40000c00 	.word	0x40000c00
 8001050:	40014000 	.word	0x40014000
 8001054:	40014400 	.word	0x40014400
 8001058:	40014800 	.word	0x40014800

0800105c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	f023 0201 	bic.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800108a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f023 0302 	bic.w	r3, r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <TIM_OC1_SetConfig+0xc8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10c      	bne.n	80010d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f023 0308 	bic.w	r3, r3, #8
 80010be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <TIM_OC1_SetConfig+0xc8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d111      	bne.n	80010fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	621a      	str	r2, [r3, #32]
}
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40010000 	.word	0x40010000

08001128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	f023 0210 	bic.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800115e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f023 0320 	bic.w	r3, r3, #32
 8001172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <TIM_OC2_SetConfig+0xd4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d10d      	bne.n	80011a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800118e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <TIM_OC2_SetConfig+0xd4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d113      	bne.n	80011d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	621a      	str	r2, [r3, #32]
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40010000 	.word	0x40010000

08001200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800122e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <TIM_OC3_SetConfig+0xd0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10d      	bne.n	800127a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4313      	orrs	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <TIM_OC3_SetConfig+0xd0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d113      	bne.n	80012aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	621a      	str	r2, [r3, #32]
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40010000 	.word	0x40010000

080012d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800130a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800131e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	031b      	lsls	r3, r3, #12
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <TIM_OC4_SetConfig+0x9c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d109      	bne.n	8001348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800133a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	621a      	str	r2, [r3, #32]
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40010000 	.word	0x40010000

08001374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	2201      	movs	r2, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	621a      	str	r2, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <__libc_init_array>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	4e0d      	ldr	r6, [pc, #52]	; (8001420 <__libc_init_array+0x38>)
 80013ec:	4c0d      	ldr	r4, [pc, #52]	; (8001424 <__libc_init_array+0x3c>)
 80013ee:	1ba4      	subs	r4, r4, r6
 80013f0:	10a4      	asrs	r4, r4, #2
 80013f2:	2500      	movs	r5, #0
 80013f4:	42a5      	cmp	r5, r4
 80013f6:	d109      	bne.n	800140c <__libc_init_array+0x24>
 80013f8:	4e0b      	ldr	r6, [pc, #44]	; (8001428 <__libc_init_array+0x40>)
 80013fa:	4c0c      	ldr	r4, [pc, #48]	; (800142c <__libc_init_array+0x44>)
 80013fc:	f000 f820 	bl	8001440 <_init>
 8001400:	1ba4      	subs	r4, r4, r6
 8001402:	10a4      	asrs	r4, r4, #2
 8001404:	2500      	movs	r5, #0
 8001406:	42a5      	cmp	r5, r4
 8001408:	d105      	bne.n	8001416 <__libc_init_array+0x2e>
 800140a:	bd70      	pop	{r4, r5, r6, pc}
 800140c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001410:	4798      	blx	r3
 8001412:	3501      	adds	r5, #1
 8001414:	e7ee      	b.n	80013f4 <__libc_init_array+0xc>
 8001416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800141a:	4798      	blx	r3
 800141c:	3501      	adds	r5, #1
 800141e:	e7f2      	b.n	8001406 <__libc_init_array+0x1e>
 8001420:	08001458 	.word	0x08001458
 8001424:	08001458 	.word	0x08001458
 8001428:	08001458 	.word	0x08001458
 800142c:	0800145c 	.word	0x0800145c

08001430 <memset>:
 8001430:	4402      	add	r2, r0
 8001432:	4603      	mov	r3, r0
 8001434:	4293      	cmp	r3, r2
 8001436:	d100      	bne.n	800143a <memset+0xa>
 8001438:	4770      	bx	lr
 800143a:	f803 1b01 	strb.w	r1, [r3], #1
 800143e:	e7f9      	b.n	8001434 <memset+0x4>

08001440 <_init>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr

0800144c <_fini>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr
